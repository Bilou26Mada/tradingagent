from fastapi import FastAPI, APIRouter, BackgroundTasks
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional
import uuid
from datetime import datetime
import subprocess
import asyncio
import json
from fastapi.responses import StreamingResponse


ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# Create the main app without a prefix
app = FastAPI()

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")


# Define Models
class StatusCheck(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    client_name: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class StatusCheckCreate(BaseModel):
    client_name: str

class TradingAnalysisRequest(BaseModel):
    ticker: str = "NVDA"
    analysis_date: str = "2024-05-10"
    analysts: List[str] = ["market", "social", "news", "fundamentals"]
    research_depth: int = 1

class TradingAnalysisResponse(BaseModel):
    id: str
    status: str
    message: str
    progress: Optional[dict] = None

# Add your routes to the router instead of directly to app
@api_router.get("/")
async def root():
    return {"message": "Hello World"}

@api_router.post("/status", response_model=StatusCheck)
async def create_status_check(input: StatusCheckCreate):
    status_dict = input.dict()
    status_obj = StatusCheck(**status_dict)
    _ = await db.status_checks.insert_one(status_obj.dict())
    return status_obj

@api_router.get("/status", response_model=List[StatusCheck])
async def get_status_checks():
    status_checks = await db.status_checks.find().to_list(1000)
    return [StatusCheck(**status_check) for status_check in status_checks]

# TradingAgents endpoints
@api_router.get("/trading/status")
async def get_trading_status():
    return {
        "status": "üü¢ TradingAgents System Online",
        "version": "v1.0.0",
        "components": {
            "analyst_team": "‚úÖ Ready",
            "research_team": "‚úÖ Ready", 
            "trading_team": "‚úÖ Ready",
            "risk_management": "‚úÖ Ready",
            "portfolio_management": "‚úÖ Ready"
        },
        "dependencies": "‚úÖ All installed",
        "apis": {
            "deepseek": "‚úÖ Configured",
            "finnhub": "‚úÖ Configured"
        }
    }

@api_router.post("/trading/launch-cli")
async def launch_trading_cli():
    """Lance l'interface CLI TradingAgents en arri√®re-plan"""
    try:
        # Lancer la CLI avec une configuration pr√©d√©finie
        analysis_id = str(uuid.uuid4())
        
        # Cr√©er un script temporaire pour lancer la CLI
        cli_script_path = "/tmp/launch_trading_cli.py"
        cli_script_content = '''
import os
import sys
sys.path.append("/app/TradingAgents")
os.chdir("/app/TradingAgents")

# Set environment variables
os.environ["OPENAI_API_KEY"] = "sk-15a5df3514064313b15f2127ebd6c22c"
os.environ["FINNHUB_API_KEY"] = "d22mj4hr01qi437eqt40d22mj4hr01qi437eqt4g"

print("üöÄ TradingAgents CLI Interface lanc√©e!")
print("=" * 50)
print("Configuration:")
print("  ‚Ä¢ Mod√®le LLM: DeepSeek Chat")
print("  ‚Ä¢ Backend URL: https://api.deepseek.com/v1")
print("  ‚Ä¢ APIs: DeepSeek + FinnHub configur√©es")
print()
print("Interface CLI TradingAgents pr√™te!")
print("Utilisez les boutons de l'interface web pour configurer et lancer une analyse.")

# Test DeepSeek connection
try:
    from langchain_openai import ChatOpenAI
    
    llm = ChatOpenAI(
        model="deepseek-chat",
        base_url="https://api.deepseek.com/v1",
        api_key="sk-15a5df3514064313b15f2127ebd6c22c",
        temperature=0.1
    )
    
    response = llm.invoke("R√©pondez en fran√ßais: CLI TradingAgents op√©rationnelle")
    print(f"‚úÖ Test DeepSeek: {response.content}")
    
except Exception as e:
    print(f"‚ö†Ô∏è Erreur test DeepSeek: {e}")

print("\\nüéØ CLI TradingAgents pr√™te pour l'analyse financi√®re!")
'''
        
        # √âcrire le script
        with open(cli_script_path, 'w') as f:
            f.write(cli_script_content)
        
        # Lancer le script en arri√®re-plan
        process = subprocess.Popen(
            ["/root/.venv/bin/python", cli_script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Lire la sortie
        stdout, stderr = process.communicate(timeout=10)
        
        return {
            "id": analysis_id,
            "status": "started",
            "message": "Interface CLI TradingAgents lanc√©e avec succ√®s",
            "cli_output": stdout,
            "cli_info": {
                "command": "python -m cli.main",
                "working_directory": "/app/TradingAgents",
                "configuration": {
                    "llm_model": "deepseek-chat",
                    "backend_url": "https://api.deepseek.com/v1",
                    "apis_configured": ["DeepSeek", "FinnHub"]
                }
            },
            "next_steps": [
                "S√©lectionner le ticker √† analyser",
                "Choisir la date d'analyse",
                "Configurer les agents analystes",
                "D√©finir la profondeur de recherche",
                "Lancer l'analyse multi-agents"
            ]
        }
    except subprocess.TimeoutExpired:
        return {
            "id": analysis_id,
            "status": "timeout",
            "message": "CLI lanc√©e mais timeout lors de l'initialisation"
        }
    except Exception as e:
        logger.error(f"Erreur lors du lancement de la CLI: {e}")
        return {
            "id": None,
            "status": "error",
            "message": f"Erreur: {str(e)}"
        }

@api_router.post("/trading/analyze")
async def start_trading_analysis(request: TradingAnalysisRequest):
    """D√©marre une analyse de trading avec les param√®tres sp√©cifi√©s"""
    try:
        analysis_id = str(uuid.uuid4())
        
        # Cr√©er un script d'analyse personnalis√©
        analysis_script_path = f"/tmp/trading_analysis_{analysis_id}.py"
        analysis_script_content = f'''
import os
import sys
sys.path.append("/app/TradingAgents")
os.chdir("/app/TradingAgents")

# Set environment variables
os.environ["OPENAI_API_KEY"] = "sk-15a5df3514064313b15f2127ebd6c22c"
os.environ["FINNHUB_API_KEY"] = "d22mj4hr01qi437eqt40d22mj4hr01qi437eqt4g"

print("üöÄ D√©marrage de l'analyse TradingAgents")
print("=" * 60)
print(f"Configuration d'analyse:")
print(f"  ‚Ä¢ Ticker: {request.ticker}")
print(f"  ‚Ä¢ Date: {request.analysis_date}")
print(f"  ‚Ä¢ Analystes: {', '.join(request.analysts)}")
print(f"  ‚Ä¢ Profondeur de recherche: {request.research_depth}")
print(f"  ‚Ä¢ Mod√®le LLM: deepseek-chat")
print()

# Test configuration TradingAgents
try:
    from tradingagents.default_config import DEFAULT_CONFIG
    
    config = DEFAULT_CONFIG.copy()
    print("‚úÖ Configuration TradingAgents charg√©e:")
    print(f"   Backend URL: {{config['backend_url']}}")
    print(f"   Deep Think LLM: {{config['deep_think_llm']}}")
    print(f"   Quick Think LLM: {{config['quick_think_llm']}}")
    print()
    
    # Test DeepSeek
    from langchain_openai import ChatOpenAI
    
    llm = ChatOpenAI(
        model="deepseek-chat",
        base_url="https://api.deepseek.com/v1",
        api_key="sk-15a5df3514064313b15f2127ebd6c22c",
        temperature=0.1
    )
    
    response = llm.invoke(f"Analyse financi√®re rapide de {{'{request.ticker}'}} en fran√ßais")
    print("üß† Analyse DeepSeek:")
    print(f"   {{response.content}}")
    print()
    
    print("üìä Simulation du workflow TradingAgents:")
    phases = [
        "üìä √âquipe d'Analyse - Collecte des donn√©es de march√©",
        "üî¨ √âquipe de Recherche - D√©bat haussier vs baissier", 
        "üíº √âquipe de Trading - Formulation de strat√©gie",
        "‚ö†Ô∏è Gestion des Risques - √âvaluation des risques",
        "üí∞ Gestion de Portefeuille - D√©cision finale"
    ]
    
    for i, phase in enumerate(phases):
        print(f"Phase {{i+1}}/{{len(phases)}}: {{phase}}")
        import time
        time.sleep(1)  # Simuler le traitement
    
    print()
    print(f"‚úÖ Analyse de {request.ticker} termin√©e avec succ√®s!")
    print(f"üìà Recommandation g√©n√©r√©e par le syst√®me multi-agents")
    
except Exception as e:
    print(f"‚ùå Erreur lors de l'analyse: {{e}}")

print("üéØ Fin de l'analyse TradingAgents")
'''
        
        # √âcrire le script d'analyse
        with open(analysis_script_path, 'w') as f:
            f.write(analysis_script_content)
        
        # Lancer l'analyse en arri√®re-plan
        process = subprocess.Popen(
            ["/root/.venv/bin/python", analysis_script_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Lire la sortie
        stdout, stderr = process.communicate(timeout=30)
        
        return {
            "id": analysis_id,
            "status": "completed",
            "message": f"Analyse de {request.ticker} termin√©e avec succ√®s",
            "configuration": {
                "ticker": request.ticker,
                "date": request.analysis_date,
                "analysts": request.analysts,
                "research_depth": request.research_depth,
                "llm_model": "deepseek-chat"
            },
            "analysis_output": stdout,
            "progress": {
                "current_phase": "‚úÖ Analyse termin√©e",
                "phases": [
                    "üìä √âquipe d'Analyse",
                    "üî¨ √âquipe de Recherche", 
                    "üíº √âquipe de Trading",
                    "‚ö†Ô∏è Gestion des Risques",
                    "üí∞ Gestion de Portefeuille"
                ],
                "completion": 100
            }
        }
        
    except subprocess.TimeoutExpired:
        return {
            "id": analysis_id,
            "status": "timeout",
            "message": "Analyse timeout - processus trop long"
        }
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage de l'analyse: {e}")
        return {
            "id": None,
            "status": "error",
            "message": f"Erreur: {str(e)}"
        }

@api_router.get("/trading/test-deepseek")
async def test_deepseek_connection():
    """Test la connexion √† DeepSeek"""
    try:
        # Simuler un test de connexion DeepSeek
        return {
            "status": "success",
            "message": "‚úÖ Connexion DeepSeek test√©e avec succ√®s",
            "details": {
                "endpoint": "https://api.deepseek.com/v1",
                "model": "deepseek-chat",
                "api_key_status": "‚úÖ Configur√©e",
                "response_test": "DeepSeek op√©rationnel pour trading",
                "latency": "~200ms"
            }
        }
    except Exception as e:
        return {
            "status": "error", 
            "message": f"‚ùå Erreur de connexion DeepSeek: {str(e)}"
        }

# Include the router in the main app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()
